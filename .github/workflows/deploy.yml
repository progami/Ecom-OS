name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          echo "üöÄ Starting deployment..."
          
          # Create targon user if doesn't exist
          if ! id targon &>/dev/null; then
            echo "Creating targon user..."
            sudo useradd -m -s /bin/bash targon
          fi
          
          # Create application directory
          sudo mkdir -p /home/targon/app
          sudo chown -R targon:targon /home/targon
          
          # Run deployment as targon user
          sudo -u targon bash << 'EOF'
          set -e
          
          echo "üìÅ Navigating to application directory..."
          cd /home/targon/app
          
          # Clone or pull repository
          if [ ! -d ".git" ]; then
            echo "üîÑ Cloning repository..."
            git clone https://github.com/progami/ecom-os.git .
          else
            echo "üîÑ Pulling latest changes from main branch..."
            git fetch origin
            git reset --hard origin/main
          fi
          
          echo "üì¶ Installing dependencies..."
          npm ci --production
          
          echo "üî® Building application..."
          npm run build
          
          echo "üîÑ Restarting application with PM2..."
          if pm2 describe targon-frontend > /dev/null 2>&1; then
            pm2 restart targon-frontend
          else
            PORT=3000 pm2 start ecosystem.config.js
          fi
          
          pm2 save
          
          echo "‚úÖ Deployment completed successfully!"
          EOF
          
          # Update nginx if needed
          if ! grep -q "location / {" /etc/nginx/sites-available/default; then
            echo "üìù Updating nginx configuration..."
            sudo tee -a /etc/nginx/sites-available/default << 'NGINX_EOF' > /dev/null
          
          # Targon Global frontend (port 3000)
          location / {
              proxy_pass http://localhost:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
          }
          
          # Next.js static files
          location /_next/static {
              proxy_pass http://localhost:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              expires 1y;
              add_header Cache-Control "public, immutable";
          }
          NGINX_EOF
            
            sudo nginx -t && sudo systemctl reload nginx
          fi
          
          echo "üéâ Application deployed and running!"

    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
        # Check if site is accessible
        response=$(curl -s -o /dev/null -w "%{http_code}" https://targonglobal.com || echo "000")
        if [ "$response" = "200" ]; then
          echo "‚úÖ Site is up and running!"
        else
          echo "‚ö†Ô∏è Site returned HTTP $response"
          echo "This might be normal if nginx configuration needs manual update"
        fi